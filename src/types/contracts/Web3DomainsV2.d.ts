/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface Web3DomainsV2Interface extends ethers.utils.Interface {
  functions: {
    "WhiteListDiscount()": FunctionFragment;
    "_bookingList(bytes)": FunctionFragment;
    "_isBookingListActive()": FunctionFragment;
    "_nativeAddress(uint256)": FunctionFragment;
    "_saleIsActive()": FunctionFragment;
    "_saleTwoCharIsActive()": FunctionFragment;
    "_tokenURIs(uint256)": FunctionFragment;
    "_whiteList(address)": FunctionFragment;
    "addBookingList(string)": FunctionFragment;
    "addBookingLists(string[])": FunctionFragment;
    "addKey(string)": FunctionFragment;
    "addWhiteList(address,uint256)": FunctionFragment;
    "addWhiteLists(address[],uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnSubDomain(uint256,string)": FunctionFragment;
    "buyDomain(string,string)": FunctionFragment;
    "chkInBookingList(string)": FunctionFragment;
    "chkInWhiteList(address)": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "genTokenId(string)": FunctionFragment;
    "get(string,uint256)": FunctionFragment;
    "get2charTimes()": FunctionFragment;
    "get3charTimes()": FunctionFragment;
    "get4charTimes()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getByHash(uint256,uint256)": FunctionFragment;
    "getDomainbyAddress(address)": FunctionFragment;
    "getKey(uint256)": FunctionFragment;
    "getKeys(uint256[])": FunctionFragment;
    "getMany(string[],uint256)": FunctionFragment;
    "getManyByHash(uint256[],uint256)": FunctionFragment;
    "getOwner(string)": FunctionFragment;
    "getPrice()": FunctionFragment;
    "getPrice2Char()": FunctionFragment;
    "getPrice3Char()": FunctionFragment;
    "getPrice4Char()": FunctionFragment;
    "grantMinterRole(address)": FunctionFragment;
    "hasRole(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isApprovedOrOwner(address,uint256)": FunctionFragment;
    "isTLD(string)": FunctionFragment;
    "isWhiteList4Discount()": FunctionFragment;
    "isWhiteListActive()": FunctionFragment;
    "name()": FunctionFragment;
    "numberInWhiteList(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "reconfigure(string[],string[],uint256)": FunctionFragment;
    "registerDomain(address,string,string)": FunctionFragment;
    "registerSubDomain(address,uint256,string)": FunctionFragment;
    "removeBookingList(string)": FunctionFragment;
    "removeResolver(string)": FunctionFragment;
    "removeReverse()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reset(uint256)": FunctionFragment;
    "resolverOf(string)": FunctionFragment;
    "reverseOf(address)": FunctionFragment;
    "revokeMinterRole(address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "set(string,string,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setBookingListActive()": FunctionFragment;
    "setByHash(uint256,string,uint256)": FunctionFragment;
    "setMany(string[],string[],uint256)": FunctionFragment;
    "setManyByHash(uint256[],string[],uint256)": FunctionFragment;
    "setOwner(address,uint256)": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "setResolver(uint256,address)": FunctionFragment;
    "setReverse(uint256)": FunctionFragment;
    "setSaleState()": FunctionFragment;
    "setSaleStateTwoChar()": FunctionFragment;
    "setTLD(string)": FunctionFragment;
    "setTimes(uint256,uint256,uint256)": FunctionFragment;
    "setWhiteList4Discount()": FunctionFragment;
    "setWhiteListActive(bool)": FunctionFragment;
    "setWhiteListDiscount(uint256)": FunctionFragment;
    "subTokenIdByIndex(uint256,uint256)": FunctionFragment;
    "subTokenIdCount(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "WhiteListDiscount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_bookingList",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_isBookingListActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_nativeAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_saleIsActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_saleTwoCharIsActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_tokenURIs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_whiteList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addBookingList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addBookingLists",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "addKey", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addWhiteList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhiteLists",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnSubDomain",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyDomain",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "chkInBookingList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "chkInWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "genTokenId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "get",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get2charTimes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get3charTimes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get4charTimes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getByHash",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainbyAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeys",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMany",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getManyByHash",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "getPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPrice2Char",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice3Char",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice4Char",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "hasRole", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedOrOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isTLD", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isWhiteList4Discount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWhiteListActive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberInWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reconfigure",
    values: [string[], string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDomain",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSubDomain",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBookingList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeResolver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeReverse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reset", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "resolverOf", values: [string]): string;
  encodeFunctionData(functionFragment: "reverseOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revokeMinterRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBaseURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBookingListActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setByHash",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMany",
    values: [string[], string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setManyByHash",
    values: [BigNumberish[], string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReverse",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleStateTwoChar",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setTLD", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTimes",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhiteList4Discount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWhiteListActive",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhiteListDiscount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subTokenIdByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subTokenIdCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "WhiteListDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_bookingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isBookingListActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_nativeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_saleIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_saleTwoCharIsActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_tokenURIs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_whiteList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addBookingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBookingLists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhiteLists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnSubDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyDomain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chkInBookingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chkInWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "genTokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get2charTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get3charTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get4charTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getByHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainbyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getManyByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrice2Char",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrice3Char",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrice4Char",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedOrOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTLD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhiteList4Discount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhiteListActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberInWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reconfigure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSubDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBookingList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeReverse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolverOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reverseOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeMinterRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBookingListActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setByHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManyByHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setReverse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSaleState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleStateTwoChar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTLD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTimes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhiteList4Discount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhiteListActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhiteListDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subTokenIdByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subTokenIdCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "NewKey(uint256,string,string)": EventFragment;
    "NewURI(uint256,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ResetRecords(uint256)": EventFragment;
    "Set(uint256,string,string,string,string)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewKey"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetRecords"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Set"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    approved: string;
    tokenId: BigNumber;
  }
>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    owner: string;
    operator: string;
    approved: boolean;
  }
>;

export type NewKeyEvent = TypedEvent<
  [BigNumber, string, string] & {
    tokenId: BigNumber;
    keyIndex: string;
    key: string;
  }
>;

export type NewURIEvent = TypedEvent<
  [BigNumber, string] & { tokenId: BigNumber; tokenUri: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ResetRecordsEvent = TypedEvent<
  [BigNumber] & { tokenId: BigNumber }
>;

export type SetEvent = TypedEvent<
  [BigNumber, string, string, string, string] & {
    tokenId: BigNumber;
    keyIndex: string;
    valueIndex: string;
    key: string;
    value: string;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; tokenId: BigNumber }
>;

export class Web3DomainsV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: Web3DomainsV2Interface;

  functions: {
    WhiteListDiscount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _bookingList(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    _isBookingListActive(overrides?: CallOverrides): Promise<[boolean]>;

    _nativeAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _saleIsActive(overrides?: CallOverrides): Promise<[boolean]>;

    _saleTwoCharIsActive(overrides?: CallOverrides): Promise<[boolean]>;

    _tokenURIs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _whiteList(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    addBookingList(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBookingLists(
      names: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addKey(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWhiteList(
      account: string,
      numbers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWhiteLists(
      accounts: string[],
      numbers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnSubDomain(
      tokenId: BigNumberish,
      sub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyDomain(
      domain: string,
      tld: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chkInBookingList(
      name: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    chkInWhiteList(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    genTokenId(label: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    get(
      key: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    get2charTimes(overrides?: CallOverrides): Promise<[BigNumber]>;

    get3charTimes(overrides?: CallOverrides): Promise<[BigNumber]>;

    get4charTimes(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getByHash(
      keyHash: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { key: string; value: string }>;

    getDomainbyAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[]] & { tokenIds: BigNumber[]; domains: string[] }
    >;

    getKey(keyHash: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getKeys(
      hashes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string[]] & { values: string[] }>;

    getMany(
      keys: string[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { values: string[] }>;

    getManyByHash(
      keyHashes: BigNumberish[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { keys: string[]; values: string[] }>;

    getOwner(domain: string, overrides?: CallOverrides): Promise<[string]>;

    getPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice2Char(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice3Char(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice4Char(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantMinterRole(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedOrOwner(
      account: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTLD(_tld: string, overrides?: CallOverrides): Promise<[boolean]>;

    isWhiteList4Discount(overrides?: CallOverrides): Promise<[boolean]>;

    isWhiteListActive(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    numberInWhiteList(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reconfigure(
      keys: string[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerDomain(
      to: string,
      domain: string,
      tld: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerSubDomain(
      to: string,
      tokenId: BigNumberish,
      sub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeBookingList(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeResolver(string)"(
      domain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeResolver(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeReverse(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reset(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "resolverOf(string)"(
      domain: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "resolverOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reverseOf(account: string, overrides?: CallOverrides): Promise<[string]>;

    revokeMinterRole(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set(
      key: string,
      value: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBookingListActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setByHash(
      keyHash: BigNumberish,
      value: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMany(
      keys: string[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManyByHash(
      keyHashes: BigNumberish[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setResolver(
      tokenId: BigNumberish,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReverse(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReverse(string)"(
      domain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleStateTwoChar(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTLD(
      _tld: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimes(
      _2chartimenew: BigNumberish,
      _3chartimenew: BigNumberish,
      _4chartimenew: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhiteList4Discount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhiteListActive(
      _isWhiteListActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhiteListDiscount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subTokenIdByIndex(
      tokenId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    subTokenIdCount(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WhiteListDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  _bookingList(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  _isBookingListActive(overrides?: CallOverrides): Promise<boolean>;

  _nativeAddress(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  _saleIsActive(overrides?: CallOverrides): Promise<boolean>;

  _saleTwoCharIsActive(overrides?: CallOverrides): Promise<boolean>;

  _tokenURIs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  _whiteList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  addBookingList(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBookingLists(
    names: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addKey(
    key: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWhiteList(
    account: string,
    numbers: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWhiteLists(
    accounts: string[],
    numbers: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnSubDomain(
    tokenId: BigNumberish,
    sub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyDomain(
    domain: string,
    tld: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chkInBookingList(name: string, overrides?: CallOverrides): Promise<boolean>;

  chkInWhiteList(addr: string, overrides?: CallOverrides): Promise<boolean>;

  exists(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  genTokenId(label: string, overrides?: CallOverrides): Promise<BigNumber>;

  get(
    key: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  get2charTimes(overrides?: CallOverrides): Promise<BigNumber>;

  get3charTimes(overrides?: CallOverrides): Promise<BigNumber>;

  get4charTimes(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getByHash(
    keyHash: BigNumberish,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { key: string; value: string }>;

  getDomainbyAddress(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], string[]] & { tokenIds: BigNumber[]; domains: string[] }
  >;

  getKey(keyHash: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getKeys(hashes: BigNumberish[], overrides?: CallOverrides): Promise<string[]>;

  getMany(
    keys: string[],
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getManyByHash(
    keyHashes: BigNumberish[],
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string[]] & { keys: string[]; values: string[] }>;

  getOwner(domain: string, overrides?: CallOverrides): Promise<string>;

  getPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice2Char(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice3Char(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice4Char(overrides?: CallOverrides): Promise<BigNumber>;

  grantMinterRole(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(account: string, overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedOrOwner(
    account: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTLD(_tld: string, overrides?: CallOverrides): Promise<boolean>;

  isWhiteList4Discount(overrides?: CallOverrides): Promise<boolean>;

  isWhiteListActive(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  numberInWhiteList(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  reconfigure(
    keys: string[],
    values: string[],
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerDomain(
    to: string,
    domain: string,
    tld: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerSubDomain(
    to: string,
    tokenId: BigNumberish,
    sub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeBookingList(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeResolver(string)"(
    domain: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeResolver(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeReverse(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reset(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "resolverOf(string)"(
    domain: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "resolverOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  reverseOf(account: string, overrides?: CallOverrides): Promise<string>;

  revokeMinterRole(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set(
    key: string,
    value: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBookingListActive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setByHash(
    keyHash: BigNumberish,
    value: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMany(
    keys: string[],
    values: string[],
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManyByHash(
    keyHashes: BigNumberish[],
    values: string[],
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPrice(
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setResolver(
    tokenId: BigNumberish,
    resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReverse(uint256)"(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReverse(string)"(
    domain: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleStateTwoChar(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTLD(
    _tld: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimes(
    _2chartimenew: BigNumberish,
    _3chartimenew: BigNumberish,
    _4chartimenew: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhiteList4Discount(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhiteListActive(
    _isWhiteListActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhiteListDiscount(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subTokenIdByIndex(
    tokenId: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  subTokenIdCount(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WhiteListDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    _bookingList(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    _isBookingListActive(overrides?: CallOverrides): Promise<boolean>;

    _nativeAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _saleIsActive(overrides?: CallOverrides): Promise<boolean>;

    _saleTwoCharIsActive(overrides?: CallOverrides): Promise<boolean>;

    _tokenURIs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    _whiteList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addBookingList(name: string, overrides?: CallOverrides): Promise<void>;

    addBookingLists(names: string[], overrides?: CallOverrides): Promise<void>;

    addKey(key: string, overrides?: CallOverrides): Promise<void>;

    addWhiteList(
      account: string,
      numbers: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addWhiteLists(
      accounts: string[],
      numbers: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnSubDomain(
      tokenId: BigNumberish,
      sub: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyDomain(
      domain: string,
      tld: string,
      overrides?: CallOverrides
    ): Promise<void>;

    chkInBookingList(name: string, overrides?: CallOverrides): Promise<boolean>;

    chkInWhiteList(addr: string, overrides?: CallOverrides): Promise<boolean>;

    exists(tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    genTokenId(label: string, overrides?: CallOverrides): Promise<BigNumber>;

    get(
      key: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    get2charTimes(overrides?: CallOverrides): Promise<BigNumber>;

    get3charTimes(overrides?: CallOverrides): Promise<BigNumber>;

    get4charTimes(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getByHash(
      keyHash: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { key: string; value: string }>;

    getDomainbyAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string[]] & { tokenIds: BigNumber[]; domains: string[] }
    >;

    getKey(keyHash: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getKeys(
      hashes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMany(
      keys: string[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getManyByHash(
      keyHashes: BigNumberish[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { keys: string[]; values: string[] }>;

    getOwner(domain: string, overrides?: CallOverrides): Promise<string>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice2Char(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice3Char(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice4Char(overrides?: CallOverrides): Promise<BigNumber>;

    grantMinterRole(account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(account: string, overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedOrOwner(
      account: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTLD(_tld: string, overrides?: CallOverrides): Promise<boolean>;

    isWhiteList4Discount(overrides?: CallOverrides): Promise<boolean>;

    isWhiteListActive(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    numberInWhiteList(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    reconfigure(
      keys: string[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerDomain(
      to: string,
      domain: string,
      tld: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSubDomain(
      to: string,
      tokenId: BigNumberish,
      sub: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBookingList(name: string, overrides?: CallOverrides): Promise<void>;

    "removeResolver(string)"(
      domain: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeResolver(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeReverse(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reset(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "resolverOf(string)"(
      domain: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "resolverOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    reverseOf(account: string, overrides?: CallOverrides): Promise<string>;

    revokeMinterRole(account: string, overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    set(
      key: string,
      value: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(_uri: string, overrides?: CallOverrides): Promise<void>;

    setBookingListActive(overrides?: CallOverrides): Promise<void>;

    setByHash(
      keyHash: BigNumberish,
      value: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMany(
      keys: string[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setManyByHash(
      keyHashes: BigNumberish[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrice(price: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setResolver(
      tokenId: BigNumberish,
      resolver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReverse(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReverse(string)"(
      domain: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSaleState(overrides?: CallOverrides): Promise<void>;

    setSaleStateTwoChar(overrides?: CallOverrides): Promise<void>;

    setTLD(_tld: string, overrides?: CallOverrides): Promise<void>;

    setTimes(
      _2chartimenew: BigNumberish,
      _3chartimenew: BigNumberish,
      _4chartimenew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhiteList4Discount(overrides?: CallOverrides): Promise<void>;

    setWhiteListActive(
      _isWhiteListActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhiteListDiscount(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subTokenIdByIndex(
      tokenId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subTokenIdCount(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; approved: string; tokenId: BigNumber }
    >;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { owner: string; operator: string; approved: boolean }
    >;

    "NewKey(uint256,string,string)"(
      tokenId?: BigNumberish | null,
      keyIndex?: string | null,
      key?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { tokenId: BigNumber; keyIndex: string; key: string }
    >;

    NewKey(
      tokenId?: BigNumberish | null,
      keyIndex?: string | null,
      key?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { tokenId: BigNumber; keyIndex: string; key: string }
    >;

    "NewURI(uint256,string)"(
      tokenId?: BigNumberish | null,
      tokenUri?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; tokenUri: string }
    >;

    NewURI(
      tokenId?: BigNumberish | null,
      tokenUri?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; tokenUri: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ResetRecords(uint256)"(
      tokenId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    ResetRecords(
      tokenId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    "Set(uint256,string,string,string,string)"(
      tokenId?: BigNumberish | null,
      keyIndex?: string | null,
      valueIndex?: string | null,
      key?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string],
      {
        tokenId: BigNumber;
        keyIndex: string;
        valueIndex: string;
        key: string;
        value: string;
      }
    >;

    Set(
      tokenId?: BigNumberish | null,
      keyIndex?: string | null,
      valueIndex?: string | null,
      key?: null,
      value?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string],
      {
        tokenId: BigNumber;
        keyIndex: string;
        valueIndex: string;
        key: string;
        value: string;
      }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    WhiteListDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    _bookingList(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isBookingListActive(overrides?: CallOverrides): Promise<BigNumber>;

    _nativeAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _saleIsActive(overrides?: CallOverrides): Promise<BigNumber>;

    _saleTwoCharIsActive(overrides?: CallOverrides): Promise<BigNumber>;

    _tokenURIs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _whiteList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addBookingList(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBookingLists(
      names: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addKey(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWhiteList(
      account: string,
      numbers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWhiteLists(
      accounts: string[],
      numbers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnSubDomain(
      tokenId: BigNumberish,
      sub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyDomain(
      domain: string,
      tld: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chkInBookingList(
      name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chkInWhiteList(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    genTokenId(label: string, overrides?: CallOverrides): Promise<BigNumber>;

    get(
      key: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get2charTimes(overrides?: CallOverrides): Promise<BigNumber>;

    get3charTimes(overrides?: CallOverrides): Promise<BigNumber>;

    get4charTimes(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getByHash(
      keyHash: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDomainbyAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKey(
      keyHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKeys(
      hashes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMany(
      keys: string[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getManyByHash(
      keyHashes: BigNumberish[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(domain: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice2Char(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice3Char(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice4Char(overrides?: CallOverrides): Promise<BigNumber>;

    grantMinterRole(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedOrOwner(
      account: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTLD(_tld: string, overrides?: CallOverrides): Promise<BigNumber>;

    isWhiteList4Discount(overrides?: CallOverrides): Promise<BigNumber>;

    isWhiteListActive(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    numberInWhiteList(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reconfigure(
      keys: string[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerDomain(
      to: string,
      domain: string,
      tld: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerSubDomain(
      to: string,
      tokenId: BigNumberish,
      sub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeBookingList(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeResolver(string)"(
      domain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeResolver(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeReverse(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reset(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "resolverOf(string)"(
      domain: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "resolverOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reverseOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    revokeMinterRole(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set(
      key: string,
      value: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBookingListActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setByHash(
      keyHash: BigNumberish,
      value: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMany(
      keys: string[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManyByHash(
      keyHashes: BigNumberish[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setResolver(
      tokenId: BigNumberish,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReverse(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReverse(string)"(
      domain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleStateTwoChar(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTLD(
      _tld: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimes(
      _2chartimenew: BigNumberish,
      _3chartimenew: BigNumberish,
      _4chartimenew: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhiteList4Discount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhiteListActive(
      _isWhiteListActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhiteListDiscount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subTokenIdByIndex(
      tokenId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subTokenIdCount(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WhiteListDiscount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _bookingList(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isBookingListActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _nativeAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _saleIsActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _saleTwoCharIsActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _tokenURIs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _whiteList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBookingList(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBookingLists(
      names: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addKey(
      key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWhiteList(
      account: string,
      numbers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWhiteLists(
      accounts: string[],
      numbers: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnSubDomain(
      tokenId: BigNumberish,
      sub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyDomain(
      domain: string,
      tld: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chkInBookingList(
      name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chkInWhiteList(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exists(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genTokenId(
      label: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get(
      key: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get2charTimes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get3charTimes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get4charTimes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getByHash(
      keyHash: BigNumberish,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDomainbyAddress(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKey(
      keyHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeys(
      hashes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMany(
      keys: string[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManyByHash(
      keyHashes: BigNumberish[],
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(
      domain: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice2Char(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice3Char(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice4Char(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantMinterRole(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedOrOwner(
      account: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTLD(
      _tld: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhiteList4Discount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhiteListActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberInWhiteList(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reconfigure(
      keys: string[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerDomain(
      to: string,
      domain: string,
      tld: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerSubDomain(
      to: string,
      tokenId: BigNumberish,
      sub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeBookingList(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeResolver(string)"(
      domain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeResolver(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeReverse(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reset(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "resolverOf(string)"(
      domain: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "resolverOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reverseOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeMinterRole(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set(
      key: string,
      value: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBookingListActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setByHash(
      keyHash: BigNumberish,
      value: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMany(
      keys: string[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManyByHash(
      keyHashes: BigNumberish[],
      values: string[],
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPrice(
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setResolver(
      tokenId: BigNumberish,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReverse(uint256)"(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReverse(string)"(
      domain: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleStateTwoChar(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTLD(
      _tld: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimes(
      _2chartimenew: BigNumberish,
      _3chartimenew: BigNumberish,
      _4chartimenew: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhiteList4Discount(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhiteListActive(
      _isWhiteListActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhiteListDiscount(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subTokenIdByIndex(
      tokenId: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subTokenIdCount(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
